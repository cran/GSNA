// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lfisher_cpp
double lfisher_cpp(int a, int b, int c, int d, double e_precision, int alternative);
RcppExport SEXP _GSNA_lfisher_cpp(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP e_precisionSEXP, SEXP alternativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type e_precision(e_precisionSEXP);
    Rcpp::traits::input_parameter< int >::type alternative(alternativeSEXP);
    rcpp_result_gen = Rcpp::wrap(lfisher_cpp(a, b, c, d, e_precision, alternative));
    return rcpp_result_gen;
END_RCPP
}
// scoreJaccardMatrix_C
SEXP scoreJaccardMatrix_C(SEXP geneSetCollection_m);
RcppExport SEXP _GSNA_scoreJaccardMatrix_C(SEXP geneSetCollection_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type geneSetCollection_m(geneSetCollection_mSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreJaccardMatrix_C(geneSetCollection_m));
    return rcpp_result_gen;
END_RCPP
}
// scoreOCMatrix_C
SEXP scoreOCMatrix_C(SEXP geneSetCollection_m);
RcppExport SEXP _GSNA_scoreOCMatrix_C(SEXP geneSetCollection_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type geneSetCollection_m(geneSetCollection_mSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreOCMatrix_C(geneSetCollection_m));
    return rcpp_result_gen;
END_RCPP
}
// gsIntersect
Rcpp::CharacterVector gsIntersect(Rcpp::CharacterVector gs1, Rcpp::CharacterVector gs2);
RcppExport SEXP _GSNA_gsIntersect(SEXP gs1SEXP, SEXP gs2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type gs1(gs1SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type gs2(gs2SEXP);
    rcpp_result_gen = Rcpp::wrap(gsIntersect(gs1, gs2));
    return rcpp_result_gen;
END_RCPP
}
// gsIntersectCounts
Rcpp::NumericVector gsIntersectCounts(Rcpp::CharacterVector gs1, Rcpp::CharacterVector gs2, int bg_size);
RcppExport SEXP _GSNA_gsIntersectCounts(SEXP gs1SEXP, SEXP gs2SEXP, SEXP bg_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type gs1(gs1SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type gs2(gs2SEXP);
    Rcpp::traits::input_parameter< int >::type bg_size(bg_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gsIntersectCounts(gs1, gs2, bg_size));
    return rcpp_result_gen;
END_RCPP
}
// gsnFilterGeneSetCollectionList
Rcpp::List gsnFilterGeneSetCollectionList(Rcpp::CharacterVector bg, Rcpp::List geneSetCollection);
RcppExport SEXP _GSNA_gsnFilterGeneSetCollectionList(SEXP bgSEXP, SEXP geneSetCollectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geneSetCollection(geneSetCollectionSEXP);
    rcpp_result_gen = Rcpp::wrap(gsnFilterGeneSetCollectionList(bg, geneSetCollection));
    return rcpp_result_gen;
END_RCPP
}
// gsnORAtest_cpp
SEXP gsnORAtest_cpp(Rcpp::CharacterVector l, Rcpp::CharacterVector bg, Rcpp::List geneSetCollection);
RcppExport SEXP _GSNA_gsnORAtest_cpp(SEXP lSEXP, SEXP bgSEXP, SEXP geneSetCollectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geneSetCollection(geneSetCollectionSEXP);
    rcpp_result_gen = Rcpp::wrap(gsnORAtest_cpp(l, bg, geneSetCollection));
    return rcpp_result_gen;
END_RCPP
}
// scoreLFMatrix_C
SEXP scoreLFMatrix_C(SEXP geneSetCollection_m, Rcpp::Nullable<NumericVector> e_precision, SEXP alternative);
RcppExport SEXP _GSNA_scoreLFMatrix_C(SEXP geneSetCollection_mSEXP, SEXP e_precisionSEXP, SEXP alternativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type geneSetCollection_m(geneSetCollection_mSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type e_precision(e_precisionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alternative(alternativeSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreLFMatrix_C(geneSetCollection_m, e_precision, alternative));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GSNA_lfisher_cpp", (DL_FUNC) &_GSNA_lfisher_cpp, 6},
    {"_GSNA_scoreJaccardMatrix_C", (DL_FUNC) &_GSNA_scoreJaccardMatrix_C, 1},
    {"_GSNA_scoreOCMatrix_C", (DL_FUNC) &_GSNA_scoreOCMatrix_C, 1},
    {"_GSNA_gsIntersect", (DL_FUNC) &_GSNA_gsIntersect, 2},
    {"_GSNA_gsIntersectCounts", (DL_FUNC) &_GSNA_gsIntersectCounts, 3},
    {"_GSNA_gsnFilterGeneSetCollectionList", (DL_FUNC) &_GSNA_gsnFilterGeneSetCollectionList, 2},
    {"_GSNA_gsnORAtest_cpp", (DL_FUNC) &_GSNA_gsnORAtest_cpp, 3},
    {"_GSNA_scoreLFMatrix_C", (DL_FUNC) &_GSNA_scoreLFMatrix_C, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GSNA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
